const request = require('request');
const { fromRequest } = require('@spacechop/image-stream');
const compilePath = require('./../compile-path');

const extendPathParams = params => {
  const { imageAlias } = params;
  const imageAlias_0_1 = imageAlias.slice(0, 1);
  return {
    ...params,
    imageAlias_0_1,
  };
};

class HTTPResolver {
  constructor({ host, path = '/:imageAlias' }) {
    this.host = host;
    this.path = path;
  }

  getPath(pathParameters) {
    const { path, host } = this;
    // Extend parameters with calculated ones.
    const pathname = compilePath(path, extendPathParams(pathParameters));
    // URL is decoded before sending through request
    // as request will automatically encode.
    const url = decodeURI(`${host}${pathname}`);
    return url;
  }

  hasImage({ imageAlias }) {
    return new Promise((resolve, reject) => {
      const url = buildUrl(this.path, { imageAlias }, this.host);
      request.head(url, (err, response) => {
        if (err) {
          reject(err);
          return;
        }
        resolve(!err && (response.statusCode === 200 || response.statusCode === 302));
      });
    });
  }

  getImageStream({ imageAlias }) {
    const url = this.getPath({ imageAlias });
    const req = request.get(url);

    return fromRequest(req);
  }
}

module.exports = HTTPResolver;
